# import * from '../generated/prisma.graphql'

# TODO move response types into their own file
type AuthenticationResponse {
	errors: [ String ]
	isAuthenticationPending: Boolean
	isAuthenticated: Boolean
	authURL: String
}

type CategoryResponse {
	category: Category
	errors: [ String ]
}

type EvernoteResponse {
	errors: [ String ]
	notes: [ Note ]
}

type IngredientResponse {
	errors: [ String ]
	ingredient: Ingredient
}

type RecipeResponse {
	errors: [ String ]
	recipe: Recipe
}

type RecipesResponse {
	errors: [ String ]
	recipes: [ Recipe ]
}

type TagResponse {
	errors: [ String ]
	tag: Tag
}

type Query {
	category(where: CategoryWhereUniqueInput): Category
  categories: [ Category! ]!
  categoryAggregate: AggregateCategory!

	isEvernoteAuthenticated: AuthenticationResponse!

	ingredient(where: IngredientWhereUniqueInput!): Ingredient
	ingredients: [ Ingredient! ]!
	ingredientAggregate: IngredientAggregate!

	note(where: NoteWhereUniqueInput!): Note
	notes: [ Note! ]!
	noteAggregate: AggregateNote!

	recipe(where: RecipeWhereUniqueInput!): Recipe
	recipes: [ Recipe! ]!
	recipeAggregate: RecipeAggregate!

	tag(where: TagWhereUniqueInput!): Tag
	tags: [ Tag! ]!
	tagAggregate: AggregateTag!
}

type Mutation {
	authenticate(oauthVerifier: String): AuthenticationResponse
	clearAuthentication: AuthenticationResponse

	convertNotes: RecipesResponse!
	importNotes: EvernoteResponse!
	parseNotes: EvernoteResponse!

  createCategory(data: CategoryCreateInput): CategoryResponse!
  deleteCategory(where: CategoryWhereUniqueInput!): CategoryResponse!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): CategoryResponse!

	createIngredient(data: IngredientCreateInput!) : IngredientResponse!
	deleteIngredient(where: IngredientWhereUniqueInput!): IngredientResponse!
	updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): IngredientResponse!

	createRecipe(data: RecipeCreateInput): RecipeResponse!
	deleteRecipe(where: RecipeWhereUniqueInput!): RecipeResponse!
	updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): RecipeResponse!

	createTag(data: TagCreateInput): TagResponse!
	deleteTag(where: TagWhereUniqueInput!): TagResponse!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): TagResponse!
}
